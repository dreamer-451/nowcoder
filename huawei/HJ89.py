"""
HJ89 24点运算

功能:
计算24点是一种扑克牌益智游戏，随机抽出4张扑克牌，通过加(+)，减(-)，乘(*), 除(/)四种运算法则计算得到整数24，
本问题中，扑克牌通过如下字符或者字符串表示，其中，小写joker表示小王，大写JOKER表示大王：
3 4 5 6 7 8 9 10 J Q K A 2 joker JOKER
本程序要求实现：输入4张牌，输出一个算式，算式的结果为24点。
详细说明：
1.运算只考虑加减乘除运算，没有阶乘等特殊运算符号，没有括号，友情提醒，整数除法要当心，是属于整除，比如2/3=0，3/2=1；
2.牌面2~10对应的权值为2~10, J、Q、K、A权值分别为为11、12、13、1；
3.输入4张牌为字符串形式，以一个空格隔开，首尾无空格；如果输入的4张牌中包含大小王，则输出字符串“ERROR”，表示无法运算；
4.输出的算式格式为4张牌通过+-*/四个运算符相连，中间无空格，4张牌出现顺序任意，只要结果正确；
5.输出算式的运算顺序从左至右，不包含括号，如1+2+3*4的结果为24，2 A 9 A不能变为(2+1)*(9-1)=24
6.如果存在多种算式都能计算得出24，只需输出一种即可，如果无法得出24，则输出“NONE”表示无解。
7.因为都是扑克牌，不存在单个牌为0的情况，且没有括号运算，除数(即分母)的数字不可能为0

数据范围：
一行由4张牌组成的字符串

输入：
输入4张牌为字符串形式，以一个空格隔开，首尾无空格

输出：
输出怎么运算得到24，
如果无法得出24，则输出“NONE”表示无解，
如果输入的4张牌中包含大小王，则输出字符串“ERROR”，表示无法运算；
"""
from itertools import permutations

pokers = {
    "A": "1",
    "2": "2",
    "3": "3",
    "4": "4",
    "5": "5",
    "6": "6",
    "7": "7",
    "8": "8",
    "9": "9",
    "10": "10",
    "J": "11",
    "Q": "12",
    "K": "13",
}
ops = ["+", "-", "*", "/"]


def cal24(cards):
    if "joker" in cards or "JOKER" in cards:
        return "ERROR"
    for cs in permutations(cards):
        exp0 = cs[0]
        num0 = pokers[cs[0]]
        for op in ops:
            exp1 = exp0 + op + cs[1]
            num1 = str(eval(num0 + op + pokers[cs[1]]))
            for op in ops:
                exp2 = exp1 + op + cs[2]
                num2 = str(eval(num1 + op + pokers[cs[2]]))
                for op in ops:
                    exp3 = exp2 + op + cs[3]
                    num3 = eval(num2 + op + pokers[cs[3]])
                    if num3 == 24:
                        return exp3
    return "NONE"


if __name__ == "__main__":
    cards = input().split()
    ans = cal24(cards)
    print(ans)
